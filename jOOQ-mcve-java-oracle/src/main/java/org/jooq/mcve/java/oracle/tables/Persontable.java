/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.java.oracle.tables;


import java.math.BigDecimal;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.mcve.java.oracle.Keys;
import org.jooq.mcve.java.oracle.Mcve;
import org.jooq.mcve.java.oracle.tables.records.PersontableRecord;
import org.jooq.mcve.java.oracle.udt.Persontype;
import org.jooq.mcve.java.oracle.udt.paths.PersontypePath;
import org.jooq.mcve.java.oracle.udt.records.PersontypeRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Persontable extends TableImpl<PersontableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>MCVE.PERSONTABLE</code>
     */
    public static final Persontable PERSONTABLE = new Persontable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PersontableRecord> getRecordType() {
        return PersontableRecord.class;
    }

    /**
     * The column <code>MCVE.PERSONTABLE.ID</code>.
     */
    public final TableField<PersontableRecord, BigDecimal> ID = createField(DSL.name("ID"), SQLDataType.NUMERIC.nullable(false).identity(true), this, "");

    /**
     * The column <code>MCVE.PERSONTABLE.PERSON_INFO</code>.
     */
    public final PersontypePath<PersontableRecord, PersontypeRecord> PERSON_INFO = Internal.createUDTPathTableField(DSL.name("PERSON_INFO"), Persontype.PERSONTYPE.getDataType(), this, "", PersontypePath.class);

    private Persontable(Name alias, Table<PersontableRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Persontable(Name alias, Table<PersontableRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>MCVE.PERSONTABLE</code> table reference
     */
    public Persontable(String alias) {
        this(DSL.name(alias), PERSONTABLE);
    }

    /**
     * Create an aliased <code>MCVE.PERSONTABLE</code> table reference
     */
    public Persontable(Name alias) {
        this(alias, PERSONTABLE);
    }

    /**
     * Create a <code>MCVE.PERSONTABLE</code> table reference
     */
    public Persontable() {
        this(DSL.name("PERSONTABLE"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mcve.MCVE;
    }

    @Override
    public Identity<PersontableRecord, BigDecimal> getIdentity() {
        return (Identity<PersontableRecord, BigDecimal>) super.getIdentity();
    }

    @Override
    public UniqueKey<PersontableRecord> getPrimaryKey() {
        return Keys.PK_PERSON;
    }

    @Override
    public Persontable as(String alias) {
        return new Persontable(DSL.name(alias), this);
    }

    @Override
    public Persontable as(Name alias) {
        return new Persontable(alias, this);
    }

    @Override
    public Persontable as(Table<?> alias) {
        return new Persontable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Persontable rename(String name) {
        return new Persontable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Persontable rename(Name name) {
        return new Persontable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Persontable rename(Table<?> name) {
        return new Persontable(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Persontable where(Condition condition) {
        return new Persontable(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Persontable where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Persontable where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Persontable where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Persontable where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Persontable where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Persontable where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Persontable where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Persontable whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Persontable whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
